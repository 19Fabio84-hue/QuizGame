{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\component\\\\quiz.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst AnswerHtml = props => {\n  const buttons = [];\n  function GetButtons() {\n    for (let i = 0; i < props.answers.length; i++) {\n      const styles = {\n        backgroundColor: props.isHeld ? 'green' : 'white'\n      };\n      const button = /*#__PURE__*/_jsxDEV(\"button\", {\n        style: styles,\n        id: GenerateNewDice(),\n        className: \"main-btn\"\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 30\n      }, this);\n      buttons.push(button);\n    }\n    return buttons;\n  }\n  function GenerateNewDice() {\n    return {\n      isHeld: false,\n      id: nanoid()\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: GetButtons()\n  }, void 0, false);\n};\n_c = AnswerHtml;\nexport default function GetDataHtml() {\n  _s();\n  const [answer, setAnswer] = React.useState([]);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5').then(response => response.json()).then(data => {\n      const newId = nanoid();\n      const correctAnswer = data.results.map(pio => pio.correct_answer);\n      const incorrectArrey = data.results.map(pio => pio.incorrect_answers);\n      const typeArray = data.results.map(pio => pio.type);\n      const question = data.results.map(pio => pio.question);\n      const allAnswer = correctAnswer.map((get, index) => ({\n        title: question[index],\n        correct: {\n          value: get,\n          id: newId\n        },\n        incorrec: [incorrectArrey[index].map(pio => ({\n          id: newId,\n          value: pio\n        }))],\n        isHeld: false,\n        type: typeArray[index],\n        id: newId,\n        answers: [...incorrectArrey[index], correctAnswer[index]]\n      }));\n      setAnswer(allAnswer);\n    });\n  }, []);\n  console.log(answer);\n  const finalAnswer = answer.map(x => {\n    return /*#__PURE__*/_createElement(AnswerHtml, {\n      ...x,\n      key: nanoid(),\n      id: x.answers,\n      answers: x.answers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"main-title\",\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-flex\",\n        children: finalAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(GetDataHtml, \"Y2SfHEM8URI8tNHEfF5r19ufvoY=\");\n_c2 = GetDataHtml;\nvar _c, _c2;\n$RefreshReg$(_c, \"AnswerHtml\");\n$RefreshReg$(_c2, \"GetDataHtml\");","map":{"version":3,"names":["React","nanoid","AnswerHtml","props","buttons","GetButtons","i","answers","length","styles","backgroundColor","isHeld","button","GenerateNewDice","push","id","GetDataHtml","answer","setAnswer","useState","useEffect","fetch","then","response","json","data","newId","correctAnswer","results","map","pio","correct_answer","incorrectArrey","incorrect_answers","typeArray","type","question","allAnswer","get","index","title","correct","value","incorrec","console","log","finalAnswer","x"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/component/quiz.js"],"sourcesContent":["import React from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nconst AnswerHtml = (props) =>{\r\n\r\n    const buttons = []\r\n    function GetButtons(){\r\n        for (let i = 0 ; i < props.answers.length ; i++){\r\n            const styles = {backgroundColor : props.isHeld ? 'green' :'white'}\r\n            const button = ( <button style={styles} key={nanoid()}  id={GenerateNewDice()} className='main-btn'></button>)\r\n            buttons.push(button)\r\n        }\r\n        return buttons\r\n    }\r\n    function GenerateNewDice(){\r\n        return {isHeld :false , id:nanoid()}\r\n    }\r\n   \r\n   \r\n    return ( \r\n        <>\r\n         {GetButtons()}\r\n        </>      \r\n    )\r\n}\r\n\r\nexport default function GetDataHtml(){\r\n\r\n    const [answer , setAnswer] = React.useState([])\r\n    React.useEffect(()=>{\r\n        fetch('https://opentdb.com/api.php?amount=5')\r\n        .then(response => response.json())\r\n        .then(data => {        \r\n            const newId = nanoid()\r\n            const correctAnswer = data.results.map(pio => pio.correct_answer)\r\n            const incorrectArrey = data.results.map((pio) => pio.incorrect_answers)\r\n            const typeArray = data.results.map(pio => pio.type)\r\n            const question = data.results.map(pio => pio.question)          \r\n            const allAnswer = correctAnswer.map((get , index) => ({\r\n              title:question[index] , correct:{value:get , id:newId}, incorrec:[incorrectArrey[index].map((pio) => ({id:newId , value:pio}))] ,isHeld : false , type:typeArray[index] , id:newId, answers :[...incorrectArrey[index],correctAnswer[index]]\r\n            }))\r\n         setAnswer(allAnswer)\r\n      })\r\n    },[])\r\n    console.log(answer) \r\n    \r\n    const finalAnswer = answer.map(x=>{\r\n        return <AnswerHtml {...x} key={nanoid()} id={x.answers} answers={x.answers}\r\n         />\r\n        })\r\n        \r\n    return(\r\n        <main>\r\n         <div>\r\n            <h3 className='main-title'>{props.title}</h3>\r\n            <div className='main-flex'>\r\n              {finalAnswer}\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}