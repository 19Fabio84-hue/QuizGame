{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\button\\\\setButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetButtons(props) {\n  _s();\n  //  const Button = (props) =>{\n  //     const stylesCheck = {backgroundColor : props.correct ?  ' green' :  props.isheld === true ? 'red' :'rgb(221, 224, 238)'}\n  //      const styles = { backgroundColor : props.isheld ? 'green' :  '#FFF'}\n\n  //     return (\n  //         <div>  \n  //             {props.check ? \n  //                <button className='main-btn' disabled style={stylesCheck} id={props.id}  onClick={props.toggle}>{props.value}</button>             \n  //              : <button className='main-btn' style={styles} id={props.id}  onClick={props.toggle}>{props.value}</button> }            \n  //         </div>\n  //     )\n  // }\n\n  const [buttonArray, setButtonArray] = useState(pushArray());\n  function getArray() {\n    return {\n      id: nanoid(),\n      isheld: false\n    };\n  }\n  function pushArray() {\n    const dice = [];\n    for (let i = 0; i < 1; i++) {\n      dice.push(getArray());\n    }\n    return dice;\n  }\n  function ChangeColor(id) {\n    setButtonArray(prev => prev.map(get => {\n      return get.id === id ? {\n        ...get,\n        isheld: !get.isheld\n      } : get;\n    }));\n  }\n  const buttonFinal = buttonArray.map(get => {\n    const styles = {\n      backgroundColor: get.isheld ? 'green' : '#FFF'\n    };\n    const stylesCheck = {\n      backgroundColor: props.correct ? ' green' : get.isheld === true ? 'red' : 'rgb(221, 224, 238)'\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        isheld: get.isheld,\n        style: styles,\n        id: get.id,\n        onClick: () => ChangeColor(get.id),\n        children: props.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 23\n      }, this)\n    }, void 0, false);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: buttonFinal\n  }, void 0, false);\n}\n_s(SetButtons, \"FUbxn7PFsf7bnBxNIgZvQYZ0zBM=\");\n_c = SetButtons;\nvar _c;\n$RefreshReg$(_c, \"SetButtons\");","map":{"version":3,"names":["React","useState","nanoid","SetButtons","props","buttonArray","setButtonArray","pushArray","getArray","id","isheld","dice","i","push","ChangeColor","prev","map","get","buttonFinal","styles","backgroundColor","stylesCheck","correct","value"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/button/setButtons.js"],"sourcesContent":["import React , { useState} from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function SetButtons(props){\r\n    //  const Button = (props) =>{\r\n    //     const stylesCheck = {backgroundColor : props.correct ?  ' green' :  props.isheld === true ? 'red' :'rgb(221, 224, 238)'}\r\n    //      const styles = { backgroundColor : props.isheld ? 'green' :  '#FFF'}\r\n        \r\n    //     return (\r\n    //         <div>  \r\n    //             {props.check ? \r\n    //                <button className='main-btn' disabled style={stylesCheck} id={props.id}  onClick={props.toggle}>{props.value}</button>             \r\n    //              : <button className='main-btn' style={styles} id={props.id}  onClick={props.toggle}>{props.value}</button> }            \r\n    //         </div>\r\n    //     )\r\n    // }\r\n   \r\n    const [buttonArray , setButtonArray ] = useState(pushArray())\r\n\r\n    function getArray(){\r\n        return ( {id:nanoid() , isheld:false})\r\n    }\r\n    function pushArray(){\r\n        const dice=[]\r\n        for ( let i=0 ; i< 1 ; i++){\r\n            dice.push(getArray())\r\n        }\r\n        return dice\r\n    }\r\n    function ChangeColor(id){\r\n        setButtonArray(prev=> prev.map(get=>{\r\n            return get.id === id ? {...get , isheld:!get.isheld} : get\r\n        })\r\n        )\r\n    }\r\n    const buttonFinal = buttonArray.map(get=>{\r\n        const styles = { backgroundColor : get.isheld ? 'green' :  '#FFF'}\r\n        const stylesCheck = {backgroundColor : props.correct ?  ' green' :  get.isheld === true ? 'red' :'rgb(221, 224, 238)'}\r\n          return    <>\r\n                      <button className='main-btn' isheld={get.isheld} style={styles} id={get.id}  onClick={()=>ChangeColor(get.id)}>{props.value}</button>          \r\n          </>\r\n        })\r\n    return (\r\n    <>\r\n    {buttonFinal}\r\n    </>)\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAKC,QAAQ,QAAO,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAA;AAAA;AAE/B,eAAe,SAASC,UAAU,CAACC,KAAK,EAAC;EAAA;EACrC;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,WAAW,EAAGC,cAAc,CAAE,GAAGL,QAAQ,CAACM,SAAS,EAAE,CAAC;EAE7D,SAASC,QAAQ,GAAE;IACf,OAAS;MAACC,EAAE,EAACP,MAAM,EAAE;MAAGQ,MAAM,EAAC;IAAK,CAAC;EACzC;EACA,SAASH,SAAS,GAAE;IAChB,MAAMI,IAAI,GAAC,EAAE;IACb,KAAM,IAAIC,CAAC,GAAC,CAAC,EAAGA,CAAC,GAAE,CAAC,EAAGA,CAAC,EAAE,EAAC;MACvBD,IAAI,CAACE,IAAI,CAACL,QAAQ,EAAE,CAAC;IACzB;IACA,OAAOG,IAAI;EACf;EACA,SAASG,WAAW,CAACL,EAAE,EAAC;IACpBH,cAAc,CAACS,IAAI,IAAGA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAE;MAChC,OAAOA,GAAG,CAACR,EAAE,KAAKA,EAAE,GAAG;QAAC,GAAGQ,GAAG;QAAGP,MAAM,EAAC,CAACO,GAAG,CAACP;MAAM,CAAC,GAAGO,GAAG;IAC9D,CAAC,CAAC,CACD;EACL;EACA,MAAMC,WAAW,GAAGb,WAAW,CAACW,GAAG,CAACC,GAAG,IAAE;IACrC,MAAME,MAAM,GAAG;MAAEC,eAAe,EAAGH,GAAG,CAACP,MAAM,GAAG,OAAO,GAAI;IAAM,CAAC;IAClE,MAAMW,WAAW,GAAG;MAACD,eAAe,EAAGhB,KAAK,CAACkB,OAAO,GAAI,QAAQ,GAAIL,GAAG,CAACP,MAAM,KAAK,IAAI,GAAG,KAAK,GAAE;IAAoB,CAAC;IACpH,oBAAU;MAAA,uBACE;QAAQ,SAAS,EAAC,UAAU;QAAC,MAAM,EAAEO,GAAG,CAACP,MAAO;QAAC,KAAK,EAAES,MAAO;QAAC,EAAE,EAAEF,GAAG,CAACR,EAAG;QAAE,OAAO,EAAE,MAAIK,WAAW,CAACG,GAAG,CAACR,EAAE,CAAE;QAAA,UAAEL,KAAK,CAACmB;MAAK;QAAA;QAAA;QAAA;MAAA;IAAU,iBAC9I;EACL,CAAC,CAAC;EACN,oBACA;IAAA,UACCL;EAAW,iBACT;AACP;AAAC,GA3CuBf,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}