{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Button from './button';\nexport default function GetQuizMenu() {\n  _s();\n  const [quizdata, setData] = React.useState([]);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5').then(response => response.json()).then(data => setData(data.results));\n  }, []);\n  //   console.log(quizdata)\n\n  const provetta = quizdata.map(_ref => {\n    let {\n      correct_answer,\n      incorrect_answers\n    } = _ref;\n    const proviamo = [correct_answer, ...incorrect_answers];\n    return shuffleArray(proviamo);\n  });\n  //   console.log(provetta)\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n}\n_s(GetQuizMenu, \"n+R8LNVtQz5PYSNXcEUuXWXycQo=\");\n_c = GetQuizMenu;\nvar _c;\n$RefreshReg$(_c, \"GetQuizMenu\");","map":{"version":3,"names":["React","nanoid","Button","GetQuizMenu","quizdata","setData","useState","useEffect","fetch","then","response","json","data","results","provetta","map","correct_answer","incorrect_answers","proviamo","shuffleArray","array","i","length","j","Math","floor","random"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/component/quiz.js"],"sourcesContent":["import React from 'react'\r\nimport { nanoid} from 'nanoid'\r\nimport Button from './button'\r\n\r\n\r\nexport default function GetQuizMenu(){\r\n     \r\n    const [quizdata , setData] = React.useState([])\r\n   \r\n      React.useEffect(()=>{\r\n        fetch('https://opentdb.com/api.php?amount=5')\r\n         .then(response => response.json())\r\n         .then(data => setData(data.results))\r\n      },[])\r\n    //   console.log(quizdata)\r\n        \r\n      const provetta = quizdata.map(({correct_answer,incorrect_answers})=>{\r\n        const proviamo = [correct_answer,...incorrect_answers]\r\n        return shuffleArray(proviamo)\r\n      })\r\n    //   console.log(provetta)\r\n      function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n      }    \r\n   \r\n   \r\n}\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAO,QAAQ;AAC9B,OAAOC,MAAM,MAAM,UAAU;AAG7B,eAAe,SAASC,WAAW,GAAE;EAAA;EAEjC,MAAM,CAACC,QAAQ,EAAGC,OAAO,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;EAE7CN,KAAK,CAACO,SAAS,CAAC,MAAI;IAClBC,KAAK,CAAC,sCAAsC,CAAC,CAC3CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,OAAO,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC;EACvC,CAAC,EAAC,EAAE,CAAC;EACP;;EAEE,MAAMC,QAAQ,GAAGV,QAAQ,CAACW,GAAG,CAAC,QAAsC;IAAA,IAArC;MAACC,cAAc;MAACC;IAAiB,CAAC;IAC/D,MAAMC,QAAQ,GAAG,CAACF,cAAc,EAAC,GAAGC,iBAAiB,CAAC;IACtD,OAAOE,YAAY,CAACD,QAAQ,CAAC;EAC/B,CAAC,CAAC;EACJ;EACE,SAASC,YAAY,CAACC,KAAK,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOD,KAAK;EACd;AAGN;AAAC,GAzBuBjB,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}