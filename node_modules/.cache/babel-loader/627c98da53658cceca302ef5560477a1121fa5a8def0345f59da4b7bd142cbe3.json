{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\component\\\\quiz.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Button from '../button/setButtons';\nimport Domanda from './domanda';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetQuizMenu() {\n  _s();\n  // Presa dati dall' API   \n\n  const [quizdata, setData] = React.useState([]);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5').then(response => response.json()).then(data => setData(data.results));\n  }, []);\n\n  // Presa Array di Domande e Risposte\n\n  const questionHtml = quizdata.map(poi => poi.question);\n  const provetta = quizdata.map(_ref => {\n    let {\n      correct_answer,\n      incorrect_answers\n    } = _ref;\n    const proviamo = [correct_answer, ...incorrect_answers];\n    return shuffleArray(proviamo);\n  }); //  QUI MESCOLO L'ARRAY DELLE DOMANDE\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n  const arrayFinale = provetta.map((get, index) => {\n    return {\n      question: questionHtml[index],\n      answer: get\n    };\n  });\n  const getAnswers = arrayFinale.map(prev => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-ctn\",\n      children: [/*#__PURE__*/_jsxDEV(Domanda, {\n        value: prev.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-ctn\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          value: prev.answer[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: prev.answer[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: prev.answer[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: prev.answer[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  });\n  const [correctAnswer, setCorrectAnswer] = React.useState(false);\n  function CheckAnswer() {\n    setCorrectAnswer(true);\n    if (!correctAnswer) {\n      return getAnswers;\n    } else {\n      getAnswers = quizdata.map(prev => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-ctn\",\n          children: [/*#__PURE__*/_jsxDEV(Domanda, {\n            value: prev.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-ctn\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              value: prev.correct_answer[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"red\",\n              value: prev.incorrect_answers[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              value: prev.correct_answer[2]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              value: prev.correct_answer[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 20\n        }, this);\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [getAnswers, /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      className: \"main-btn\",\n      value: correctAnswer ? 'Restart Quiz' : 'Check Answer',\n      onClick: () => CheckAnswer()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(GetQuizMenu, \"LsadCmpEK9zTwROuAwTkQWKSnew=\");\n_c = GetQuizMenu;\nvar _c;\n$RefreshReg$(_c, \"GetQuizMenu\");","map":{"version":3,"names":["React","Button","Domanda","GetQuizMenu","quizdata","setData","useState","useEffect","fetch","then","response","json","data","results","questionHtml","map","poi","question","provetta","correct_answer","incorrect_answers","proviamo","shuffleArray","array","i","length","j","Math","floor","random","arrayFinale","get","index","answer","getAnswers","prev","correctAnswer","setCorrectAnswer","CheckAnswer"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/component/quiz.js"],"sourcesContent":["import React from 'react'\r\nimport Button from '../button/setButtons'\r\nimport Domanda from './domanda'\r\n\r\nexport default function GetQuizMenu(){\r\n     \r\n      // Presa dati dall' API   \r\n\r\n    const [quizdata , setData] = React.useState([])\r\n      React.useEffect( () =>{\r\n         fetch('https://opentdb.com/api.php?amount=5')\r\n          .then(response => response.json())\r\n          .then(data=> setData(data.results) )\r\n        \r\n      },[]) \r\n\r\n      // Presa Array di Domande e Risposte\r\n  \r\n      const questionHtml = quizdata.map(poi=> poi.question)\r\n      const provetta =  quizdata.map(({correct_answer,incorrect_answers})=>{\r\n        const proviamo = [correct_answer,...incorrect_answers]\r\n        return shuffleArray(proviamo)\r\n      })                      //  QUI MESCOLO L'ARRAY DELLE DOMANDE\r\n      function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n      } \r\n      const arrayFinale = provetta.map((get,index)=> {\r\n        return {question:questionHtml[index] , answer:get}\r\n      })\r\n        \r\n      const getAnswers = arrayFinale.map(prev=>{\r\n        return <div className='main-ctn'>\r\n                  <Domanda  value={prev.question}/>\r\n                  <div className='btn-ctn'>\r\n                     <Button  value={prev.answer[0]}/>\r\n                     <Button  value={prev.answer[1]}/>\r\n                     <Button  value={prev.answer[2]}/>\r\n                     <Button  value={prev.answer[3]}/>\r\n                  </div>\r\n                     <hr></hr>\r\n\r\n        </div>\r\n      })\r\n      const [correctAnswer , setCorrectAnswer] = React.useState(false)\r\n     function CheckAnswer(){\r\n      setCorrectAnswer(true)\r\n       if(!correctAnswer){\r\n           return getAnswers\r\n       }else{\r\n          getAnswers = quizdata.map(prev => {\r\n            return <div className='main-ctn'>\r\n              <Domanda  value={prev.question}/>\r\n              <div className='btn-ctn'>\r\n               <Button  value={prev.correct_answer[0]}/>\r\n               <Button  className='red' value={prev.incorrect_answers[1]}/>\r\n               <Button  value={prev.correct_answer[2]}/>\r\n               <Button  value={prev.correct_answer[1]}/>\r\n              </div>\r\n               <hr></hr>\r\n\r\n             </div>\r\n          })\r\n       }\r\n      \r\n     }\r\n     \r\n      return (\r\n        <main>\r\n           {getAnswers}\r\n           <input type='submit' className='main-btn' value={correctAnswer ? 'Restart Quiz':'Check Answer'} onClick={()=>CheckAnswer()}/>\r\n        </main>\r\n      )\r\n}\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,WAAW;AAAA;AAE/B,eAAe,SAASC,WAAW,GAAE;EAAA;EAE/B;;EAEF,MAAM,CAACC,QAAQ,EAAGC,OAAO,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;EAC7CN,KAAK,CAACO,SAAS,CAAE,MAAK;IACnBC,KAAK,CAAC,sCAAsC,CAAC,CAC3CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAGP,OAAO,CAACO,IAAI,CAACC,OAAO,CAAC,CAAE;EAExC,CAAC,EAAC,EAAE,CAAC;;EAEL;;EAEA,MAAMC,YAAY,GAAGV,QAAQ,CAACW,GAAG,CAACC,GAAG,IAAGA,GAAG,CAACC,QAAQ,CAAC;EACrD,MAAMC,QAAQ,GAAId,QAAQ,CAACW,GAAG,CAAC,QAAsC;IAAA,IAArC;MAACI,cAAc;MAACC;IAAiB,CAAC;IAChE,MAAMC,QAAQ,GAAG,CAACF,cAAc,EAAC,GAAGC,iBAAiB,CAAC;IACtD,OAAOE,YAAY,CAACD,QAAQ,CAAC;EAC/B,CAAC,CAAC,EAAsB;EACxB,SAASC,YAAY,CAACC,KAAK,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOD,KAAK;EACd;EACA,MAAMO,WAAW,GAAGZ,QAAQ,CAACH,GAAG,CAAC,CAACgB,GAAG,EAACC,KAAK,KAAI;IAC7C,OAAO;MAACf,QAAQ,EAACH,YAAY,CAACkB,KAAK,CAAC;MAAGC,MAAM,EAACF;IAAG,CAAC;EACpD,CAAC,CAAC;EAEF,MAAMG,UAAU,GAAGJ,WAAW,CAACf,GAAG,CAACoB,IAAI,IAAE;IACvC,oBAAO;MAAK,SAAS,EAAC,UAAU;MAAA,wBACtB,QAAC,OAAO;QAAE,KAAK,EAAEA,IAAI,CAAClB;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eACjC;QAAK,SAAS,EAAC,SAAS;QAAA,wBACrB,QAAC,MAAM;UAAE,KAAK,EAAEkB,IAAI,CAACF,MAAM,CAAC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAAE,eACjC,QAAC,MAAM;UAAE,KAAK,EAAEE,IAAI,CAACF,MAAM,CAAC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAAE,eACjC,QAAC,MAAM;UAAE,KAAK,EAAEE,IAAI,CAACF,MAAM,CAAC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAAE,eACjC,QAAC,MAAM;UAAE,KAAK,EAAEE,IAAI,CAACF,MAAM,CAAC,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QAC9B,eACH;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAEhB;EACR,CAAC,CAAC;EACF,MAAM,CAACG,aAAa,EAAGC,gBAAgB,CAAC,GAAGrC,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EACjE,SAASgC,WAAW,GAAE;IACrBD,gBAAgB,CAAC,IAAI,CAAC;IACrB,IAAG,CAACD,aAAa,EAAC;MACd,OAAOF,UAAU;IACrB,CAAC,MAAI;MACFA,UAAU,GAAG9B,QAAQ,CAACW,GAAG,CAACoB,IAAI,IAAI;QAChC,oBAAO;UAAK,SAAS,EAAC,UAAU;UAAA,wBAC9B,QAAC,OAAO;YAAE,KAAK,EAAEA,IAAI,CAAClB;UAAS;YAAA;YAAA;YAAA;UAAA,QAAE,eACjC;YAAK,SAAS,EAAC,SAAS;YAAA,wBACvB,QAAC,MAAM;cAAE,KAAK,EAAEkB,IAAI,CAAChB,cAAc,CAAC,CAAC;YAAE;cAAA;cAAA;cAAA;YAAA,QAAE,eACzC,QAAC,MAAM;cAAE,SAAS,EAAC,KAAK;cAAC,KAAK,EAAEgB,IAAI,CAACf,iBAAiB,CAAC,CAAC;YAAE;cAAA;cAAA;cAAA;YAAA,QAAE,eAC5D,QAAC,MAAM;cAAE,KAAK,EAAEe,IAAI,CAAChB,cAAc,CAAC,CAAC;YAAE;cAAA;cAAA;cAAA;YAAA,QAAE,eACzC,QAAC,MAAM;cAAE,KAAK,EAAEgB,IAAI,CAAChB,cAAc,CAAC,CAAC;YAAE;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA,QACpC,eACL;YAAA;YAAA;YAAA;UAAA,QAAS;QAAA;UAAA;UAAA;UAAA;QAAA,QAEL;MACT,CAAC,CAAC;IACL;EAEF;EAEC,oBACE;IAAA,WACIe,UAAU,eACX;MAAO,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAC,UAAU;MAAC,KAAK,EAAEE,aAAa,GAAG,cAAc,GAAC,cAAe;MAAC,OAAO,EAAE,MAAIE,WAAW;IAAG;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACzH;AAEf;AAAC,GAxEuBnC,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}