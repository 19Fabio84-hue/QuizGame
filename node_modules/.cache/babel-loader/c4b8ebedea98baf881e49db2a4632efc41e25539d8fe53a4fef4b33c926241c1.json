{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\button\\\\setButtons.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetButtons(props) {\n  _s2();\n  var _s = $RefreshSig$();\n  const [buttonArray, setButtonArray] = useState(pushArray());\n  function getArray() {\n    return {\n      id: nanoid(),\n      isheld: false\n    };\n  }\n  function pushArray() {\n    const dice = [];\n    for (let i = 0; i < 1; i++) {\n      dice.push(getArray());\n    }\n    return dice;\n  }\n  function Button(_ref) {\n    _s();\n    let {\n      value\n    } = _ref;\n    const [isheld, setIsheld] = useState(false);\n    const handleClick = () => {\n      setIsheld(!isheld);\n    };\n    const styles = {\n      backgroundColor: isheld ? 'green' : props.correct ? 'green' : props.correct === false && isheld ? 'red' : '#FFF'\n    };\n    const stylesCheck = {\n      backgroundColor: props.correct ? 'green' : isheld ? 'red' : 'rgb(221, 224, 238)'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.check ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        disabled: true,\n        style: styles,\n        onClick: handleClick,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        style: styles,\n        onClick: handleClick,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n  _s(Button, \"bAEvKAUN6R0ohefJ0LBRutRsOXE=\");\n  const buttonFinal = buttonArray.map(get => /*#__PURE__*/_jsxDEV(Button, {\n    value: props.value\n  }, get.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: buttonFinal\n  }, void 0, false);\n}\n_s2(SetButtons, \"yNc9tEC96Q/bBn1ID1JFaU0Ajas=\");\n_c = SetButtons;\nvar _c;\n$RefreshReg$(_c, \"SetButtons\");","map":{"version":3,"names":["React","useState","nanoid","SetButtons","props","buttonArray","setButtonArray","pushArray","getArray","id","isheld","dice","i","push","Button","value","setIsheld","handleClick","styles","backgroundColor","correct","stylesCheck","check","buttonFinal","map","get"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/button/setButtons.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default function SetButtons(props) {\r\n  const [buttonArray, setButtonArray] = useState(pushArray());\r\n\r\n  function getArray() {\r\n    return { id: nanoid(), isheld: false };\r\n  }\r\n\r\n  function pushArray() {\r\n    const dice = [];\r\n    for (let i = 0; i < 1; i++) {\r\n      dice.push(getArray());\r\n    }\r\n    return dice;\r\n  }\r\n\r\n  function Button({ value }) {\r\n    const [isheld, setIsheld] = useState(false);\r\n\r\n    const handleClick = () => {\r\n      setIsheld(!isheld);\r\n    };\r\n\r\n    const styles = { backgroundColor: isheld ? 'green' : props.correct ? 'green' :props.correct === false && isheld ? 'red' : '#FFF' };\r\n    const stylesCheck = {\r\n      backgroundColor: props.correct ? 'green' : isheld ? 'red' : 'rgb(221, 224, 238)',\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        {props.check ? (\r\n          <button className=\"main-btn\" disabled style={styles} onClick={handleClick}>\r\n            {value}\r\n          </button>\r\n        ) : (\r\n          <button className=\"main-btn\" style={styles} onClick={handleClick}>\r\n            {value}\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const buttonFinal = buttonArray.map((get) => (\r\n    <Button key={get.id} value={props.value} />\r\n  ));\r\n\r\n  return <>{buttonFinal}</>;\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAAA;AAEhC,eAAe,SAASC,UAAU,CAACC,KAAK,EAAE;EAAA;EAAA;EACxC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAACM,SAAS,EAAE,CAAC;EAE3D,SAASC,QAAQ,GAAG;IAClB,OAAO;MAAEC,EAAE,EAAEP,MAAM,EAAE;MAAEQ,MAAM,EAAE;IAAM,CAAC;EACxC;EAEA,SAASH,SAAS,GAAG;IACnB,MAAMI,IAAI,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,IAAI,CAACE,IAAI,CAACL,QAAQ,EAAE,CAAC;IACvB;IACA,OAAOG,IAAI;EACb;EAEA,SAASG,MAAM,OAAY;IAAA;IAAA,IAAX;MAAEC;IAAM,CAAC;IACvB,MAAM,CAACL,MAAM,EAAEM,SAAS,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;IAE3C,MAAMgB,WAAW,GAAG,MAAM;MACxBD,SAAS,CAAC,CAACN,MAAM,CAAC;IACpB,CAAC;IAED,MAAMQ,MAAM,GAAG;MAAEC,eAAe,EAAET,MAAM,GAAG,OAAO,GAAGN,KAAK,CAACgB,OAAO,GAAG,OAAO,GAAEhB,KAAK,CAACgB,OAAO,KAAK,KAAK,IAAIV,MAAM,GAAG,KAAK,GAAG;IAAO,CAAC;IAClI,MAAMW,WAAW,GAAG;MAClBF,eAAe,EAAEf,KAAK,CAACgB,OAAO,GAAG,OAAO,GAAGV,MAAM,GAAG,KAAK,GAAG;IAC9D,CAAC;IAED,oBACE;MAAA,UACGN,KAAK,CAACkB,KAAK,gBACV;QAAQ,SAAS,EAAC,UAAU;QAAC,QAAQ;QAAC,KAAK,EAAEJ,MAAO;QAAC,OAAO,EAAED,WAAY;QAAA,UACvEF;MAAK;QAAA;QAAA;QAAA;MAAA,QACC,gBAET;QAAQ,SAAS,EAAC,UAAU;QAAC,KAAK,EAAEG,MAAO;QAAC,OAAO,EAAED,WAAY;QAAA,UAC9DF;MAAK;QAAA;QAAA;QAAA;MAAA;IAET;MAAA;MAAA;MAAA;IAAA,QACG;EAEV;EAAC,GAzBQD,MAAM;EA2Bf,MAAMS,WAAW,GAAGlB,WAAW,CAACmB,GAAG,CAAEC,GAAG,iBACtC,QAAC,MAAM;IAAc,KAAK,EAAErB,KAAK,CAACW;EAAM,GAA3BU,GAAG,CAAChB,EAAE;IAAA;IAAA;IAAA;EAAA,QACpB,CAAC;EAEF,oBAAO;IAAA,UAAGc;EAAW,iBAAI;AAC3B;AAAC,IA/CuBpB,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}