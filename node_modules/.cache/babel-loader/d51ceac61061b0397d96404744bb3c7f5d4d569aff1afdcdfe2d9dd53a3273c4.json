{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\button\\\\setButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetButtons(props) {\n  _s();\n  const [buttonArray, setButtonArray] = useState(pushArray());\n  function getArray() {\n    return {\n      id: nanoid(),\n      isheld: false\n    };\n  }\n  function pushArray() {\n    const dice = [];\n    for (let i = 0; i < 1; i++) {\n      dice.push(getArray());\n    }\n    return dice;\n  }\n  function ChangeColor(id) {\n    setButtonArray(prev => prev.map(get => {\n      return get.id === id ? {\n        ...get,\n        isheld: !get.isheld\n      } : get;\n    }));\n  }\n  const buttonFinal = buttonArray.map(get => {\n    const styles = {\n      backgroundColor: get.isheld ? 'green' : '#FFF'\n    };\n    const stylesCheck = {\n      backgroundColor: props.correct ? 'green' : get.isheld ? 'red' : 'rgb(221, 224, 238)'\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: props.check ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        disabled: true,\n        style: stylesCheck,\n        id: get.id,\n        isheld: get.isheld,\n        children: props.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        style: styles,\n        id: get.id,\n        isheld: get.isheld,\n        onClick: () => ChangeColor(get.id),\n        children: props.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: buttonFinal\n  }, void 0, false);\n}\n_s(SetButtons, \"yNc9tEC96Q/bBn1ID1JFaU0Ajas=\");\n_c = SetButtons;\nvar _c;\n$RefreshReg$(_c, \"SetButtons\");","map":{"version":3,"names":["React","useState","nanoid","SetButtons","props","buttonArray","setButtonArray","pushArray","getArray","id","isheld","dice","i","push","ChangeColor","prev","map","get","buttonFinal","styles","backgroundColor","stylesCheck","correct","check","value"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/button/setButtons.js"],"sourcesContent":["import React , { useState} from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function SetButtons(props) {\r\n    const [buttonArray, setButtonArray] = useState(pushArray());\r\n  \r\n    function getArray() {\r\n      return { id: nanoid(), isheld: false };\r\n    }\r\n  \r\n    function pushArray() {\r\n      const dice = [];\r\n      for (let i = 0; i < 1; i++) {\r\n        dice.push(getArray());\r\n      }\r\n      return dice;\r\n    }\r\n  \r\n    function ChangeColor(id) {\r\n      setButtonArray((prev) =>\r\n        prev.map((get) => {\r\n          return get.id === id ? { ...get, isheld: !get.isheld } : get;\r\n        })\r\n      );\r\n    }\r\n  \r\n    const buttonFinal = buttonArray.map((get) => {\r\n      const styles = { backgroundColor: get.isheld ? 'green' : '#FFF' };\r\n      const stylesCheck = {\r\n        backgroundColor: props.correct ? 'green' : get.isheld ? 'red' : 'rgb(221, 224, 238)',\r\n      };\r\n      return (\r\n        <>\r\n          {props.check ? (\r\n            <button\r\n              className='main-btn'\r\n              disabled\r\n              style={stylesCheck}\r\n              id={get.id}\r\n              isheld={get.isheld}\r\n            >\r\n              {props.value}\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className='main-btn'\r\n              style={styles}\r\n              id={get.id}\r\n              isheld={get.isheld}\r\n              onClick={() => ChangeColor(get.id)}\r\n            >\r\n              {props.value}\r\n            </button>\r\n          )}\r\n        </>\r\n      );\r\n    });\r\n  \r\n    return <>{buttonFinal}</>;\r\n  }"],"mappings":";;AAAA,OAAOA,KAAK,IAAKC,QAAQ,QAAO,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAA;AAAA;AAE/B,eAAe,SAASC,UAAU,CAACC,KAAK,EAAE;EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAACM,SAAS,EAAE,CAAC;EAE3D,SAASC,QAAQ,GAAG;IAClB,OAAO;MAAEC,EAAE,EAAEP,MAAM,EAAE;MAAEQ,MAAM,EAAE;IAAM,CAAC;EACxC;EAEA,SAASH,SAAS,GAAG;IACnB,MAAMI,IAAI,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,IAAI,CAACE,IAAI,CAACL,QAAQ,EAAE,CAAC;IACvB;IACA,OAAOG,IAAI;EACb;EAEA,SAASG,WAAW,CAACL,EAAE,EAAE;IACvBH,cAAc,CAAES,IAAI,IAClBA,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAK;MAChB,OAAOA,GAAG,CAACR,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGQ,GAAG;QAAEP,MAAM,EAAE,CAACO,GAAG,CAACP;MAAO,CAAC,GAAGO,GAAG;IAC9D,CAAC,CAAC,CACH;EACH;EAEA,MAAMC,WAAW,GAAGb,WAAW,CAACW,GAAG,CAAEC,GAAG,IAAK;IAC3C,MAAME,MAAM,GAAG;MAAEC,eAAe,EAAEH,GAAG,CAACP,MAAM,GAAG,OAAO,GAAG;IAAO,CAAC;IACjE,MAAMW,WAAW,GAAG;MAClBD,eAAe,EAAEhB,KAAK,CAACkB,OAAO,GAAG,OAAO,GAAGL,GAAG,CAACP,MAAM,GAAG,KAAK,GAAG;IAClE,CAAC;IACD,oBACE;MAAA,UACGN,KAAK,CAACmB,KAAK,gBACV;QACE,SAAS,EAAC,UAAU;QACpB,QAAQ;QACR,KAAK,EAAEF,WAAY;QACnB,EAAE,EAAEJ,GAAG,CAACR,EAAG;QACX,MAAM,EAAEQ,GAAG,CAACP,MAAO;QAAA,UAElBN,KAAK,CAACoB;MAAK;QAAA;QAAA;QAAA;MAAA,QACL,gBAET;QACE,SAAS,EAAC,UAAU;QACpB,KAAK,EAAEL,MAAO;QACd,EAAE,EAAEF,GAAG,CAACR,EAAG;QACX,MAAM,EAAEQ,GAAG,CAACP,MAAO;QACnB,OAAO,EAAE,MAAMI,WAAW,CAACG,GAAG,CAACR,EAAE,CAAE;QAAA,UAElCL,KAAK,CAACoB;MAAK;QAAA;QAAA;QAAA;MAAA;IAEf,iBACA;EAEP,CAAC,CAAC;EAEF,oBAAO;IAAA,UAAGN;EAAW,iBAAI;AAC3B;AAAC,GAxDqBf,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}