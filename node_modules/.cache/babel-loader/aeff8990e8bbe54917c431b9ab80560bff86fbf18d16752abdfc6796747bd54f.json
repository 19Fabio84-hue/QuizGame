{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\Scrimba\\\\React\\\\Quiz\\\\src\\\\button\\\\setButtons.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Button from './button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetButtons(props) {\n  _s();\n  const Button = props => {\n    const styles = {\n      backgroundColor: props.isheld ? ' green' : '#FFF'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-btn\",\n        style: styles,\n        id: props.id,\n        isheld: props.isheld,\n        onClick: props.toggle,\n        children: props.value\n      }, props.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  };\n  console.log(props);\n  const [buttonArray, setButtonArray] = React.useState(pushArray());\n  function getArray() {\n    return {\n      id: nanoid(),\n      isheld: false\n    };\n  }\n  function pushArray() {\n    const dice = [];\n    for (let i = 0; i < 1; i++) {\n      dice.push(getArray());\n    }\n    return dice;\n  }\n  const buttonFinal = buttonArray.map(get => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        toggle: () => ChangeColor(get.id),\n        id: get.id,\n        isheld: get.isheld,\n        value: props.value\n      }, get.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 22\n      }, this)\n    }, void 0, false);\n  });\n  function ChangeColor(id) {\n    setButtonArray(prev => prev.map(get => {\n      return get.id === id ? {\n        ...get,\n        isheld: !get.isheld\n      } : get;\n    }));\n    const prova = props.map(() => {\n      return {\n        buttonFinal\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: prova\n  }, void 0, false);\n}\n_s(SetButtons, \"FUbxn7PFsf7bnBxNIgZvQYZ0zBM=\");\n_c = SetButtons;\nvar _c;\n$RefreshReg$(_c, \"SetButtons\");","map":{"version":3,"names":["React","nanoid","Button","SetButtons","props","styles","backgroundColor","isheld","id","toggle","value","console","log","buttonArray","setButtonArray","useState","pushArray","getArray","dice","i","push","buttonFinal","map","get","ChangeColor","prev","prova"],"sources":["C:/Users/UTENTE/Desktop/Scrimba/React/Quiz/src/button/setButtons.js"],"sourcesContent":["import React from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport Button from './button'\r\n\r\nexport default function SetButtons(props){\r\n     const Button = (props) =>{\r\n        \r\n         const styles = { backgroundColor : props.isheld ?  ' green' : '#FFF'}\r\n    \r\n        return (\r\n            <div>  \r\n                <button className='main-btn' style={styles} id={props.id} key={props.id} isheld={props.isheld} onClick={props.toggle}>{props.value}</button>             \r\n            </div>\r\n        )\r\n    }\r\n    console.log(props)\r\n    const [buttonArray , setButtonArray ] =React.useState(pushArray())\r\n\r\n    function getArray(){\r\n        return ( {id:nanoid() , isheld:false})\r\n    }\r\n    function pushArray(){\r\n        const dice=[]\r\n        for ( let i=0 ; i< 1; i++){\r\n            dice.push(getArray())\r\n        }\r\n        return dice\r\n    }\r\n    const buttonFinal = buttonArray.map(get=>{\r\n          return    <>\r\n                     <Button toggle={()=>ChangeColor(get.id)} id={get.id} isheld={get.isheld} key={get.id} value={props.value}/>          \r\n          </>\r\n        })\r\n    function ChangeColor(id){\r\n        setButtonArray(prev=> prev.map(get=>{\r\n            return get.id === id ? {...get , isheld:!get.isheld} : get\r\n        })\r\n        )\r\n        const prova = props.map(() =>{\r\n            return {buttonFinal}\r\n        })\r\n    }\r\n    return (\r\n    <>\r\n    {prova}\r\n    </>)\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAAA;AAAA;AAE7B,eAAe,SAASC,UAAU,CAACC,KAAK,EAAC;EAAA;EACpC,MAAMF,MAAM,GAAIE,KAAK,IAAI;IAErB,MAAMC,MAAM,GAAG;MAAEC,eAAe,EAAGF,KAAK,CAACG,MAAM,GAAI,QAAQ,GAAG;IAAM,CAAC;IAEtE,oBACI;MAAA,uBACI;QAAQ,SAAS,EAAC,UAAU;QAAC,KAAK,EAAEF,MAAO;QAAC,EAAE,EAAED,KAAK,CAACI,EAAG;QAAgB,MAAM,EAAEJ,KAAK,CAACG,MAAO;QAAC,OAAO,EAAEH,KAAK,CAACK,MAAO;QAAA,UAAEL,KAAK,CAACM;MAAK,GAAnEN,KAAK,CAACI,EAAE;QAAA;QAAA;QAAA;MAAA;IAAqE;MAAA;MAAA;MAAA;IAAA,QAC1I;EAEd,CAAC;EACDG,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;EAClB,MAAM,CAACS,WAAW,EAAGC,cAAc,CAAE,GAAEd,KAAK,CAACe,QAAQ,CAACC,SAAS,EAAE,CAAC;EAElE,SAASC,QAAQ,GAAE;IACf,OAAS;MAACT,EAAE,EAACP,MAAM,EAAE;MAAGM,MAAM,EAAC;IAAK,CAAC;EACzC;EACA,SAASS,SAAS,GAAE;IAChB,MAAME,IAAI,GAAC,EAAE;IACb,KAAM,IAAIC,CAAC,GAAC,CAAC,EAAGA,CAAC,GAAE,CAAC,EAAEA,CAAC,EAAE,EAAC;MACtBD,IAAI,CAACE,IAAI,CAACH,QAAQ,EAAE,CAAC;IACzB;IACA,OAAOC,IAAI;EACf;EACA,MAAMG,WAAW,GAAGR,WAAW,CAACS,GAAG,CAACC,GAAG,IAAE;IACnC,oBAAU;MAAA,uBACC,QAAC,MAAM;QAAC,MAAM,EAAE,MAAIC,WAAW,CAACD,GAAG,CAACf,EAAE,CAAE;QAAC,EAAE,EAAEe,GAAG,CAACf,EAAG;QAAC,MAAM,EAAEe,GAAG,CAAChB,MAAO;QAAc,KAAK,EAAEH,KAAK,CAACM;MAAM,GAA3Ba,GAAG,CAACf,EAAE;QAAA;QAAA;QAAA;MAAA;IAAuB,iBACnH;EACL,CAAC,CAAC;EACN,SAASgB,WAAW,CAAChB,EAAE,EAAC;IACpBM,cAAc,CAACW,IAAI,IAAGA,IAAI,CAACH,GAAG,CAACC,GAAG,IAAE;MAChC,OAAOA,GAAG,CAACf,EAAE,KAAKA,EAAE,GAAG;QAAC,GAAGe,GAAG;QAAGhB,MAAM,EAAC,CAACgB,GAAG,CAAChB;MAAM,CAAC,GAAGgB,GAAG;IAC9D,CAAC,CAAC,CACD;IACD,MAAMG,KAAK,GAAGtB,KAAK,CAACkB,GAAG,CAAC,MAAK;MACzB,OAAO;QAACD;MAAW,CAAC;IACxB,CAAC,CAAC;EACN;EACA,oBACA;IAAA,UACCK;EAAK,iBACH;AACP;AAAC,GA1CuBvB,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}